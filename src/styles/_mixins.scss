@use "sass:math";
@import "variables.scss";
@import "functions.scss";

@mixin make-col($size) {
  width: percentage($size);
  padding-right: math.div($gutter-width, 2);
  padding-left: math.div($gutter-width, 2);
  box-sizing: border-box;
}

@mixin make-grid() {
  display: flex;
  flex-wrap: wrap;
  margin-right: (math.div($gutter-width, 2) * -1);
  margin-left: (math.div($gutter-width, 2) * -1);
}

@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Breakpoint '#{$breakpoint}' not found in \$breakpoints map.";
  }
}

@mixin generate-button-color-classes() {
  @each $name, $color in $colors {
    .btn-#{$name} {
      color: get-text-color($color);
      background-color: $color;
      border-color: $color;

      &:hover {
        color: get-text-color($color);
        background-color: lighten($color, 10%);
        border-color: lighten($color, 10%);
      }

      &:focus,
      &:active {
        color: get-text-color($color);
        background-color: lighten($color, 10%);
        border-color: lighten($color, 10%);
        box-shadow: 0 0 0 0.2rem rgba($color, 0.5);
      }
    }
  }
}

@mixin respond-to($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: map-get($breakpoints, xsmall)) {
      @content;
    }
  } @else if $breakpoint == sm {
    @media (min-width: map-get($breakpoints, xsmall)) and (max-width: map-get($breakpoints, small)) {
      @content;
    }
  } @else if $breakpoint == md {
    @media (min-width: map-get($breakpoints, small)) and (max-width: map-get($breakpoints, medium)) {
      @content;
    }
  } @else if $breakpoint == lg {
    @media (min-width: map-get($breakpoints, medium)) and (max-width: map-get($breakpoints, large)) {
      @content;
    }
  } @else if $breakpoint == xl {
    @media (min-width: map-get($breakpoints, large)) and (max-width: map-get($breakpoints, xlarge)) {
      @content;
    }
  } @else if $breakpoint == xxl {
    @media (min-width: map-get($breakpoints, xlarge)) {
      @content;
    }
  }
}

@mixin container-sizes($sizes) {
  @include respond-to(xs) {
    width: map-get($sizes, xs);
  }
  @include respond-to(sm) {
    width: map-get($sizes, sm);
  }
  @include respond-to(md) {
    width: map-get($sizes, md);
  }
  @include respond-to(lg) {
    width: map-get($sizes, lg);
  }
  @include respond-to(xl) {
    width: map-get($sizes, xl);
  }
  @include respond-to(xxl) {
    width: map-get($sizes, xxl);
  }
}

@mixin generate-bg-color-classes() {
  @each $name, $color in $colors {
    .bg-#{$name} {
      background-color: $color;
    }
  }
}

@mixin generate-text-color-classes() {
  @each $name, $color in $colors {
    .text-#{$name} {
      color: $color;
    }
  }
}

@mixin generate-padding-classes() {
  @each $key, $value in $padding-margin-sizes {
    .p-#{$key} {
      padding: $value;
    }
    .pt-#{$key} {
      padding-top: $value;
    }
    .pr-#{$key} {
      padding-right: $value;
    }
    .pb-#{$key} {
      padding-bottom: $value;
    }
    .pl-#{$key} {
      padding-left: $value;
    }
    .px-#{$key} {
      padding-left: $value;
      padding-right: $value;
    }
    .py-#{$key} {
      padding-top: $value;
      padding-bottom: $value;
    }
  }
}

@mixin generate-margin-classes() {
  @each $key, $value in $padding-margin-sizes {
    .m-#{$key} {
      margin: $value;
    }
    .mt-#{$key} {
      margin-top: $value;
    }
    .mr-#{$key} {
      margin-right: $value;
    }
    .mb-#{$key} {
      margin-bottom: $value;
    }
    .ml-#{$key} {
      margin-left: $value;
    }
    .mx-#{$key} {
      margin-left: $value;
      margin-right: $value;
    }
    .my-#{$key} {
      margin-top: $value;
      margin-bottom: $value;
    }
  }
}
